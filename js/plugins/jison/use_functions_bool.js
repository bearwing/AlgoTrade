/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var use_functions_bool = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"calclist":3,"b":4,"EOF":5,"funcasgn":6,"FUNC":7,"nameasgn":8,"(":9,"explist":10,")":11,"{":12,"funcnode":13,"}":14,"RETURN":15,"e":16,";":17,"valasgn":18,"ifstate":19,"whilestate":20,"forstate":21,"switchstate":22,"BREAK":23,"IF":24,"ELSE":25,"WHILE":26,"FOR":27,"simpleasgn":28,"SWITCH":29,"casenode":30,"CASE":31,":":32,"DEFAULT":33,"VAR":34,"++":35,"--":36,"+=":37,"-=":38,"*=":39,"/=":40,"%=":41,"=":42,",":43,">=":44,"<=":45,">":46,"<":47,"===":48,"!==":49,"==":50,"!=":51,"&&":52,"||":53,"?":54,"BOOLEAN":55,"boolname":56,"+":57,"-":58,"*":59,"/":60,"%":61,"NUMBER":62,"TIME":63,"MAXTIME":64,"numlist":65,"mathfunctions":66,"pricefunctions":67,"MATH.ABS":68,"MATH.EXP":69,"MATH.CEIL":70,"MATH.FLOOR":71,"MATH.LOG":72,"MATH.POW":73,"MATH.ROUND":74,"MATH.SQRT":75,"MATH.RANDOM":76,"MATH.MAX":77,"numreflist":78,"MATH.MIN":79,"PRICE.OPEN":80,"PRICE.HIGH":81,"PRICE.LOW":82,"PRICE.CLOSE":83,"PRICE.ADJ_CLOSE":84,"TRUE":85,"FALSE":86,"NAME":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"FUNC",9:"(",11:")",12:"{",14:"}",15:"RETURN",17:";",23:"BREAK",24:"IF",25:"ELSE",26:"WHILE",27:"FOR",29:"SWITCH",31:"CASE",32:":",33:"DEFAULT",34:"VAR",35:"++",36:"--",37:"+=",38:"-=",39:"*=",40:"/=",41:"%=",42:"=",43:",",44:">=",45:"<=",46:">",47:"<",48:"===",49:"!==",50:"==",51:"!=",52:"&&",53:"||",54:"?",55:"BOOLEAN",57:"+",58:"-",59:"*",60:"/",61:"%",62:"NUMBER",63:"TIME",64:"MAXTIME",68:"MATH.ABS",69:"MATH.EXP",70:"MATH.CEIL",71:"MATH.FLOOR",72:"MATH.LOG",73:"MATH.POW",74:"MATH.ROUND",75:"MATH.SQRT",76:"MATH.RANDOM",77:"MATH.MAX",79:"MATH.MIN",80:"PRICE.OPEN",81:"PRICE.HIGH",82:"PRICE.LOW",83:"PRICE.CLOSE",84:"PRICE.ADJ_CLOSE",85:"TRUE",86:"FALSE",87:"NAME"},
productions_: [0,[3,2],[6,8],[13,0],[13,4],[13,3],[13,2],[13,2],[13,2],[13,2],[13,3],[19,7],[19,3],[19,5],[20,7],[21,11],[22,7],[30,5],[30,3],[18,1],[18,2],[18,2],[18,2],[18,3],[18,3],[18,3],[18,3],[18,3],[28,3],[10,0],[10,1],[10,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,5],[4,4],[4,1],[4,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,3],[16,1],[16,1],[16,1],[16,4],[16,1],[16,1],[16,1],[66,4],[66,4],[66,4],[66,4],[66,4],[66,6],[66,4],[66,4],[66,3],[66,4],[66,4],[67,4],[67,4],[67,4],[67,4],[67,4],[67,6],[67,6],[67,6],[67,6],[67,6],[56,1],[56,1],[8,1],[65,0],[65,1],[65,1],[65,1],[65,3],[78,1],[78,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: var result = eval("main", "NORMAL", $$[$0-1]);
		  return result;
break;
case 2:this.$ = ['FUNCASGN', $$[$0-6], $$[$0-4], $$[$0-1]]; 
break;
case 3:this.$ = ['EMPTY'];
break;
case 4:this.$ = ['RETURN',$$[$0-3],$$[$0-1]];
break;
case 5:this.$ = ['VALASGN',$$[$0-2],$$[$0-1]];
break;
case 6:this.$ = ['IF',$$[$0-1],$$[$0]];
break;
case 7:this.$ = ['WHILE',$$[$0-1],$$[$0]];
break;
case 8:this.$ = ['FOR',$$[$0-1],$$[$0]];
break;
case 9:this.$ = ['SWITCH',$$[$0-1],$$[$0]];
break;
case 10:this.$ = ['BREAK',$$[$0-2]];
break;
case 11:this.$ = ['IFNODE',$$[$0-4],$$[$0-1]];
break;
case 12:this.$ = ['ELSEIFNODE',$$[$0-2],$$[$0]] ;
break;
case 13:this.$ = ['ELSENODE',$$[$0-4],$$[$0-1]] ;
break;
case 14:this.$ = ['WHILENODE',$$[$0-4],$$[$0-1]];
break;
case 15:this.$ = ['FORNODE',$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 16:this.$ = ['SWITCHNODE',$$[$0-4],$$[$0-1]];
break;
case 17:this.$ = [['CASENODE',$$[$0-3],$$[$0-1]]].concat($$[$0]);
break;
case 18:this.$ = [['DEFAULT',"",$$[$0]]];
break;
case 19:this.$ = $$[$0];
break;
case 20:this.$ = $$[$0];
break;
case 21:this.$ = ['++',$$[$0-1]];
break;
case 22:this.$ = ['--',$$[$0-1]];
break;
case 23:this.$ = ['+=',$$[$0-2],$$[$0]];
break;
case 24:this.$ = ['-=',$$[$0-2],$$[$0]];
break;
case 25:this.$ = ['*=',$$[$0-2],$$[$0]];
break;
case 26:this.$ = ['/=',$$[$0-2],$$[$0]];
break;
case 27:this.$ = ['%=',$$[$0-2],$$[$0]];
break;
case 28:this.$ = ['ASGNMENT',$$[$0-2],$$[$0]];
break;
case 29:this.$ = [];
break;
case 30:this.$ = [$$[$0]];
break;
case 31:this.$ = $$[$0-2].concat($$[$0]);
break;
case 32:this.$ = ['>=',$$[$0-2],$$[$0]];
break;
case 33:this.$ = ['<=',$$[$0-2],$$[$0]];
break;
case 34:this.$ = ['>',$$[$0-2],$$[$0]];
break;
case 35:this.$ = ['<',$$[$0-2],$$[$0]];
break;
case 36:this.$ = ['===',$$[$0-2],$$[$0]];
break;
case 37:this.$ = ['!==',$$[$0-2],$$[$0]];
break;
case 38:this.$ = ['==',$$[$0-2],$$[$0]];
break;
case 39:this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 40:this.$ = ['&&',$$[$0-2],$$[$0]];
break;
case 41:this.$ = ['||',$$[$0-2],$$[$0]];
break;
case 42:this.$ = ['CON',$$[$0-4],$$[$0-2],$$[$0]];
break;
case 43:this.$ = ['BOOLEAN',$$[$0-1]];
break;
case 44:this.$ = ['BOOLEAN',$$[$0]];
break;
case 45:this.$ = $$[$0-1];
break;
case 46:this.$ = ['+',$$[$0-2],$$[$0]];
break;
case 47:this.$ = ['-',$$[$0-2],$$[$0]];
break;
case 48:this.$ = ['*',$$[$0-2],$$[$0]];
break;
case 49:this.$ = ['/',$$[$0-2],$$[$0]];
break;
case 50:this.$ = ['%',$$[$0-2],$$[$0]];
break;
case 51:this.$ = ['NEG',$$[$0]];
break;
case 52:this.$ = $$[$0-1];
break;
case 53:this.$ = ['NUMBER', Number(yytext)];
break;
case 54:this.$ = ['REF', "tt"];
break;
case 55:this.$ = ['REF', "max_tt"];
break;
case 56:this.$ = ['CALL',$$[$0-3],$$[$0-1]];
break;
case 57:this.$ = ['REF',$$[$0]];
break;
case 58:this.$ = $$[$0];
break;
case 59:this.$ = $$[$0];
break;
case 60:this.$ = ['MATH.ABS',$$[$0-1]];
break;
case 61:this.$ = ['MATH.EXP',$$[$0-1]];
break;
case 62:this.$ = ['MATH.CEIL',$$[$0-1]];
break;
case 63:this.$ = ['MATH.FLOOR',$$[$0-1]];
break;
case 64:this.$ = ['MATH.LOG',$$[$0-1]];
break;
case 65:this.$ = ['MATH.POW',$$[$0-3],$$[$0-1]];
break;
case 66:this.$ = ['MATH.ROUND',$$[$0-1]];
break;
case 67:this.$ = ['MATH.SQRT',$$[$0-1]];
break;
case 68:this.$ = ['MATH.RANDOM'];
break;
case 69:this.$ = ['MATH.MAX', $$[$0-1]];
break;
case 70:this.$ = ['MATH.MIN', $$[$0-1]];
break;
case 71:this.$ = ['PRICE.OPEN', $$[$0-1], ['NUMBER', 1]];
break;
case 72:this.$ = ['PRICE.HIGH', $$[$0-1], ['NUMBER', 1]];
break;
case 73:this.$ = ['PRICE.LOW', $$[$0-1], ['NUMBER', 1]];
break;
case 74:this.$ = ['PRICE.CLOSE', $$[$0-1], ['NUMBER', 1]];
break;
case 75:this.$ = ['PRICE.ADJ_CLOSE', $$[$0-1], ['NUMBER', 1]];
break;
case 76:this.$ = ['PRICE.OPEN', $$[$0-3], $$[$0-1]];
break;
case 77:this.$ = ['PRICE.HIGH', $$[$0-3], $$[$0-1]];
break;
case 78:this.$ = ['PRICE.LOW', $$[$0-3], $$[$0-1]];
break;
case 79:this.$ = ['PRICE.CLOSE', $$[$0-3], $$[$0-1]];
break;
case 80:this.$ = ['PRICE.ADJ_CLOSE', $$[$0-3], $$[$0-1]];
break;
case 81:this.$ = true;
break;
case 82:this.$ = false;
break;
case 83:this.$ = yytext;
break;
case 84:this.$ = [];
break;
case 85:this.$ = [Number(yytext)];
break;
case 86:this.$ = [curr_t];
break;
case 87:this.$ = [max_t];
break;
case 88:this.$ = $$[$0-2].concat($$[$0]);
break;
case 89:this.$ = [$$[$0]];
break;
case 90:this.$ = $$[$0-2].concat($$[$0]);
break;
}
},
table: [{3:1,4:2,8:11,9:[1,6],16:3,55:[1,4],56:5,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,14],86:[1,15],87:[1,16]},{1:[3]},{5:[1,33]},{44:[1,34],45:[1,35],46:[1,36],47:[1,37],48:[1,38],49:[1,39],50:[1,40],51:[1,41],52:[1,42],53:[1,43],54:[1,44],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{9:[1,50]},{5:[2,44],11:[2,44]},{4:51,8:11,9:[1,6],16:52,55:[1,4],56:5,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,14],86:[1,15],87:[1,16]},{8:11,9:[1,54],16:53,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{5:[2,53],11:[2,53],32:[2,53],43:[2,53],44:[2,53],45:[2,53],46:[2,53],47:[2,53],48:[2,53],49:[2,53],50:[2,53],51:[2,53],52:[2,53],53:[2,53],54:[2,53],57:[2,53],58:[2,53],59:[2,53],60:[2,53],61:[2,53]},{5:[2,54],11:[2,54],32:[2,54],43:[2,54],44:[2,54],45:[2,54],46:[2,54],47:[2,54],48:[2,54],49:[2,54],50:[2,54],51:[2,54],52:[2,54],53:[2,54],54:[2,54],57:[2,54],58:[2,54],59:[2,54],60:[2,54],61:[2,54]},{5:[2,55],11:[2,55],32:[2,55],43:[2,55],44:[2,55],45:[2,55],46:[2,55],47:[2,55],48:[2,55],49:[2,55],50:[2,55],51:[2,55],52:[2,55],53:[2,55],54:[2,55],57:[2,55],58:[2,55],59:[2,55],60:[2,55],61:[2,55]},{5:[2,57],9:[1,55],11:[2,57],32:[2,57],43:[2,57],44:[2,57],45:[2,57],46:[2,57],47:[2,57],48:[2,57],49:[2,57],50:[2,57],51:[2,57],52:[2,57],53:[2,57],54:[2,57],57:[2,57],58:[2,57],59:[2,57],60:[2,57],61:[2,57]},{5:[2,58],11:[2,58],32:[2,58],43:[2,58],44:[2,58],45:[2,58],46:[2,58],47:[2,58],48:[2,58],49:[2,58],50:[2,58],51:[2,58],52:[2,58],53:[2,58],54:[2,58],57:[2,58],58:[2,58],59:[2,58],60:[2,58],61:[2,58]},{5:[2,59],11:[2,59],32:[2,59],43:[2,59],44:[2,59],45:[2,59],46:[2,59],47:[2,59],48:[2,59],49:[2,59],50:[2,59],51:[2,59],52:[2,59],53:[2,59],54:[2,59],57:[2,59],58:[2,59],59:[2,59],60:[2,59],61:[2,59]},{5:[2,81],11:[2,81]},{5:[2,82],11:[2,82]},{5:[2,83],9:[2,83],11:[2,83],32:[2,83],43:[2,83],44:[2,83],45:[2,83],46:[2,83],47:[2,83],48:[2,83],49:[2,83],50:[2,83],51:[2,83],52:[2,83],53:[2,83],54:[2,83],57:[2,83],58:[2,83],59:[2,83],60:[2,83],61:[2,83]},{9:[1,56]},{9:[1,57]},{9:[1,58]},{9:[1,59]},{9:[1,60]},{9:[1,61]},{9:[1,62]},{9:[1,63]},{9:[1,64]},{9:[1,65]},{9:[1,66]},{9:[1,67]},{9:[1,68]},{9:[1,69]},{9:[1,70]},{9:[1,71]},{1:[2,1]},{8:11,9:[1,54],16:72,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:73,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:74,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:75,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:76,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:77,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:78,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:79,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:80,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:81,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:82,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:83,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:84,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:85,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:86,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:87,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{56:88,85:[1,14],86:[1,15]},{11:[1,89]},{11:[1,90],44:[1,34],45:[1,35],46:[1,36],47:[1,37],48:[1,38],49:[1,39],50:[1,40],51:[1,41],52:[1,42],53:[1,43],54:[1,44],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{5:[2,51],11:[2,51],32:[2,51],43:[2,51],44:[2,51],45:[2,51],46:[2,51],47:[2,51],48:[2,51],49:[2,51],50:[2,51],51:[2,51],52:[2,51],53:[2,51],54:[2,51],57:[2,51],58:[2,51],59:[2,51],60:[2,51],61:[2,51]},{8:11,9:[1,54],16:91,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{11:[2,84],43:[2,84],62:[1,93],63:[1,94],64:[1,95],65:92},{8:11,9:[1,54],16:96,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:97,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:98,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:99,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:100,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:101,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:102,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:103,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{11:[1,104]},{8:11,9:[1,54],16:106,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],78:105,79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:106,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],78:107,79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:108,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:109,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:110,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:111,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{8:11,9:[1,54],16:112,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{5:[2,32],11:[2,32],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{5:[2,33],11:[2,33],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{5:[2,34],11:[2,34],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{5:[2,35],11:[2,35],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{5:[2,36],11:[2,36],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{5:[2,37],11:[2,37],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{5:[2,38],11:[2,38],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{5:[2,39],11:[2,39],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{5:[2,40],11:[2,40],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{5:[2,41],11:[2,41],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{32:[1,113],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{5:[2,46],11:[2,46],32:[2,46],43:[2,46],44:[2,46],45:[2,46],46:[2,46],47:[2,46],48:[2,46],49:[2,46],50:[2,46],51:[2,46],52:[2,46],53:[2,46],54:[2,46],57:[2,46],58:[2,46],59:[1,47],60:[1,48],61:[2,46]},{5:[2,47],11:[2,47],32:[2,47],43:[2,47],44:[2,47],45:[2,47],46:[2,47],47:[2,47],48:[2,47],49:[2,47],50:[2,47],51:[2,47],52:[2,47],53:[2,47],54:[2,47],57:[2,47],58:[2,47],59:[1,47],60:[1,48],61:[2,47]},{5:[2,48],11:[2,48],32:[2,48],43:[2,48],44:[2,48],45:[2,48],46:[2,48],47:[2,48],48:[2,48],49:[2,48],50:[2,48],51:[2,48],52:[2,48],53:[2,48],54:[2,48],57:[2,48],58:[2,48],59:[2,48],60:[2,48],61:[2,48]},{5:[2,49],11:[2,49],32:[2,49],43:[2,49],44:[2,49],45:[2,49],46:[2,49],47:[2,49],48:[2,49],49:[2,49],50:[2,49],51:[2,49],52:[2,49],53:[2,49],54:[2,49],57:[2,49],58:[2,49],59:[2,49],60:[2,49],61:[2,49]},{5:[2,50],11:[2,50],32:[2,50],43:[2,50],44:[2,50],45:[2,50],46:[2,50],47:[2,50],48:[2,50],49:[2,50],50:[2,50],51:[2,50],52:[2,50],53:[2,50],54:[2,50],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[2,50]},{11:[1,114]},{5:[2,45],11:[2,45]},{5:[2,52],11:[2,52],32:[2,52],43:[2,52],44:[2,52],45:[2,52],46:[2,52],47:[2,52],48:[2,52],49:[2,52],50:[2,52],51:[2,52],52:[2,52],53:[2,52],54:[2,52],57:[2,52],58:[2,52],59:[2,52],60:[2,52],61:[2,52]},{11:[1,90],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{11:[1,115],43:[1,116]},{11:[2,85],43:[2,85]},{11:[2,86],43:[2,86]},{11:[2,87],43:[2,87]},{11:[1,117],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{11:[1,118],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{11:[1,119],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{11:[1,120],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{11:[1,121],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{43:[1,122],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{11:[1,123],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{11:[1,124],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{5:[2,68],11:[2,68],32:[2,68],43:[2,68],44:[2,68],45:[2,68],46:[2,68],47:[2,68],48:[2,68],49:[2,68],50:[2,68],51:[2,68],52:[2,68],53:[2,68],54:[2,68],57:[2,68],58:[2,68],59:[2,68],60:[2,68],61:[2,68]},{11:[1,125],43:[1,126]},{11:[2,89],43:[2,89],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{11:[1,127],43:[1,126]},{11:[1,128],43:[1,129],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{11:[1,130],43:[1,131],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{11:[1,132],43:[1,133],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{11:[1,134],43:[1,135],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{11:[1,136],43:[1,137],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{8:11,9:[1,54],16:138,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{5:[2,43],11:[2,43]},{5:[2,56],11:[2,56],32:[2,56],43:[2,56],44:[2,56],45:[2,56],46:[2,56],47:[2,56],48:[2,56],49:[2,56],50:[2,56],51:[2,56],52:[2,56],53:[2,56],54:[2,56],57:[2,56],58:[2,56],59:[2,56],60:[2,56],61:[2,56]},{11:[2,84],43:[2,84],62:[1,93],63:[1,94],64:[1,95],65:139},{5:[2,60],11:[2,60],32:[2,60],43:[2,60],44:[2,60],45:[2,60],46:[2,60],47:[2,60],48:[2,60],49:[2,60],50:[2,60],51:[2,60],52:[2,60],53:[2,60],54:[2,60],57:[2,60],58:[2,60],59:[2,60],60:[2,60],61:[2,60]},{5:[2,61],11:[2,61],32:[2,61],43:[2,61],44:[2,61],45:[2,61],46:[2,61],47:[2,61],48:[2,61],49:[2,61],50:[2,61],51:[2,61],52:[2,61],53:[2,61],54:[2,61],57:[2,61],58:[2,61],59:[2,61],60:[2,61],61:[2,61]},{5:[2,62],11:[2,62],32:[2,62],43:[2,62],44:[2,62],45:[2,62],46:[2,62],47:[2,62],48:[2,62],49:[2,62],50:[2,62],51:[2,62],52:[2,62],53:[2,62],54:[2,62],57:[2,62],58:[2,62],59:[2,62],60:[2,62],61:[2,62]},{5:[2,63],11:[2,63],32:[2,63],43:[2,63],44:[2,63],45:[2,63],46:[2,63],47:[2,63],48:[2,63],49:[2,63],50:[2,63],51:[2,63],52:[2,63],53:[2,63],54:[2,63],57:[2,63],58:[2,63],59:[2,63],60:[2,63],61:[2,63]},{5:[2,64],11:[2,64],32:[2,64],43:[2,64],44:[2,64],45:[2,64],46:[2,64],47:[2,64],48:[2,64],49:[2,64],50:[2,64],51:[2,64],52:[2,64],53:[2,64],54:[2,64],57:[2,64],58:[2,64],59:[2,64],60:[2,64],61:[2,64]},{8:11,9:[1,54],16:140,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{5:[2,66],11:[2,66],32:[2,66],43:[2,66],44:[2,66],45:[2,66],46:[2,66],47:[2,66],48:[2,66],49:[2,66],50:[2,66],51:[2,66],52:[2,66],53:[2,66],54:[2,66],57:[2,66],58:[2,66],59:[2,66],60:[2,66],61:[2,66]},{5:[2,67],11:[2,67],32:[2,67],43:[2,67],44:[2,67],45:[2,67],46:[2,67],47:[2,67],48:[2,67],49:[2,67],50:[2,67],51:[2,67],52:[2,67],53:[2,67],54:[2,67],57:[2,67],58:[2,67],59:[2,67],60:[2,67],61:[2,67]},{5:[2,69],11:[2,69],32:[2,69],43:[2,69],44:[2,69],45:[2,69],46:[2,69],47:[2,69],48:[2,69],49:[2,69],50:[2,69],51:[2,69],52:[2,69],53:[2,69],54:[2,69],57:[2,69],58:[2,69],59:[2,69],60:[2,69],61:[2,69]},{8:11,9:[1,54],16:106,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],78:141,79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{5:[2,70],11:[2,70],32:[2,70],43:[2,70],44:[2,70],45:[2,70],46:[2,70],47:[2,70],48:[2,70],49:[2,70],50:[2,70],51:[2,70],52:[2,70],53:[2,70],54:[2,70],57:[2,70],58:[2,70],59:[2,70],60:[2,70],61:[2,70]},{5:[2,71],11:[2,71],32:[2,71],43:[2,71],44:[2,71],45:[2,71],46:[2,71],47:[2,71],48:[2,71],49:[2,71],50:[2,71],51:[2,71],52:[2,71],53:[2,71],54:[2,71],57:[2,71],58:[2,71],59:[2,71],60:[2,71],61:[2,71]},{8:11,9:[1,54],16:142,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{5:[2,72],11:[2,72],32:[2,72],43:[2,72],44:[2,72],45:[2,72],46:[2,72],47:[2,72],48:[2,72],49:[2,72],50:[2,72],51:[2,72],52:[2,72],53:[2,72],54:[2,72],57:[2,72],58:[2,72],59:[2,72],60:[2,72],61:[2,72]},{8:11,9:[1,54],16:143,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{5:[2,73],11:[2,73],32:[2,73],43:[2,73],44:[2,73],45:[2,73],46:[2,73],47:[2,73],48:[2,73],49:[2,73],50:[2,73],51:[2,73],52:[2,73],53:[2,73],54:[2,73],57:[2,73],58:[2,73],59:[2,73],60:[2,73],61:[2,73]},{8:11,9:[1,54],16:144,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{5:[2,74],11:[2,74],32:[2,74],43:[2,74],44:[2,74],45:[2,74],46:[2,74],47:[2,74],48:[2,74],49:[2,74],50:[2,74],51:[2,74],52:[2,74],53:[2,74],54:[2,74],57:[2,74],58:[2,74],59:[2,74],60:[2,74],61:[2,74]},{8:11,9:[1,54],16:145,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{5:[2,75],11:[2,75],32:[2,75],43:[2,75],44:[2,75],45:[2,75],46:[2,75],47:[2,75],48:[2,75],49:[2,75],50:[2,75],51:[2,75],52:[2,75],53:[2,75],54:[2,75],57:[2,75],58:[2,75],59:[2,75],60:[2,75],61:[2,75]},{8:11,9:[1,54],16:146,58:[1,7],62:[1,8],63:[1,9],64:[1,10],66:12,67:13,68:[1,17],69:[1,18],70:[1,19],71:[1,20],72:[1,21],73:[1,22],74:[1,23],75:[1,24],76:[1,25],77:[1,26],79:[1,27],80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],87:[1,16]},{5:[2,42],11:[2,42],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{11:[2,88],43:[2,88]},{11:[1,147],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{11:[2,90],43:[2,90]},{11:[1,148],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{11:[1,149],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{11:[1,150],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{11:[1,151],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{11:[1,152],57:[1,45],58:[1,46],59:[1,47],60:[1,48],61:[1,49]},{5:[2,65],11:[2,65],32:[2,65],43:[2,65],44:[2,65],45:[2,65],46:[2,65],47:[2,65],48:[2,65],49:[2,65],50:[2,65],51:[2,65],52:[2,65],53:[2,65],54:[2,65],57:[2,65],58:[2,65],59:[2,65],60:[2,65],61:[2,65]},{5:[2,76],11:[2,76],32:[2,76],43:[2,76],44:[2,76],45:[2,76],46:[2,76],47:[2,76],48:[2,76],49:[2,76],50:[2,76],51:[2,76],52:[2,76],53:[2,76],54:[2,76],57:[2,76],58:[2,76],59:[2,76],60:[2,76],61:[2,76]},{5:[2,77],11:[2,77],32:[2,77],43:[2,77],44:[2,77],45:[2,77],46:[2,77],47:[2,77],48:[2,77],49:[2,77],50:[2,77],51:[2,77],52:[2,77],53:[2,77],54:[2,77],57:[2,77],58:[2,77],59:[2,77],60:[2,77],61:[2,77]},{5:[2,78],11:[2,78],32:[2,78],43:[2,78],44:[2,78],45:[2,78],46:[2,78],47:[2,78],48:[2,78],49:[2,78],50:[2,78],51:[2,78],52:[2,78],53:[2,78],54:[2,78],57:[2,78],58:[2,78],59:[2,78],60:[2,78],61:[2,78]},{5:[2,79],11:[2,79],32:[2,79],43:[2,79],44:[2,79],45:[2,79],46:[2,79],47:[2,79],48:[2,79],49:[2,79],50:[2,79],51:[2,79],52:[2,79],53:[2,79],54:[2,79],57:[2,79],58:[2,79],59:[2,79],60:[2,79],61:[2,79]},{5:[2,80],11:[2,80],32:[2,80],43:[2,80],44:[2,80],45:[2,80],46:[2,80],47:[2,80],48:[2,80],49:[2,80],50:[2,80],51:[2,80],52:[2,80],53:[2,80],54:[2,80],57:[2,80],58:[2,80],59:[2,80],60:[2,80],61:[2,80]}],
defaultActions: {33:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
},
importrefarray: function importrefarray(ref) {
    for(var i in ref){
       refarray[i]=ref[i];
	}
    return;
},
importfuncarray: function importfunarray(func) {
    for(var i in func){
       funcarray[i]=func[i];
	}
    return;
},
funcinfo: function funcinfo() {
    temp = [];
    for(var i in funcarray){
	   temp = temp.concat([i]);
	}
	return temp;
},
stockinfo: function stockinfo() {
    temp = [];
    for(var i in data){
	   temp = temp.concat(data[i][0]["Symbol"]);
	}
	return temp;
},
stockoutput: function stockoutput(type, id) {
    temp = [];
	id -= 1;
	switch(type){
	   case "ADJ_CLOSE":
          for(var i in data[id]){
	         temp = temp.concat(data[id][i]["Adj_Close"]);
	      }
	      break;
	   case "OPEN":
          for(var i in data[id]){
	         temp = temp.concat(data[id][i]["Open"]);
	      }
	      break;
	   case "HIGH":
          for(var i in data[id]){
	         temp = temp.concat(data[id][i]["High"]);
	      }
	      break;
	   case "LOW":
          for(var i in data[id]){
	         temp = temp.concat(data[id][i]["Low"]);
	      }
	      break;
	   case "CLOSE":
          for(var i in data[id]){
	         temp = temp.concat(data[id][i]["Close"]);
	      }
	      break;
	   case "DATE":
          for(var i in data[id]){
	         temp = temp.concat(data[id][i]["Date"]);
	      }
	      break;
	}
	return temp;
},
pass_value: function pass_value(type, value) {
      switch(type) {
	  case "curr_t":
	     curr_t = value;
		 break;
	  case "max_t":
	     max_t = value;
		 break;
	  case "data":
	     data = data.concat(value);
		 break;
	  }
}
};

    var data = [];
   
    var max_t = 0;
    var curr_t = 0;
	
    /* Reference Array is the array saving private variables, not including those inside the arguments */
	/* Data structure: Function Name
	                         |
	                 Name(s) : Value(s)
	*/
    var refarray = {};
	
	/* Function Array is the array saving UDF information*/
	/* Data structure: Function Name
					         |
				 (1) Arg           (2) Code
					  |                 |
				Argument info         Coding
	*/
    var funcarray = {};

	/* Function assignment function */
    function funcasgn(ast){
       if (funcarray[ast[1]] == undefined) {
          /* Create new function named ast[1] */
		  funcarray[ast[1]] = {};
          
		  /* function argument assignment */
		  funcarray[ast[1]]["Arg"] = {};
          for(i=0; i<ast[2].length; i++){
             funcarray[ast[1]]["Arg"][ast[2][i]] = null;
          }
		  
		  /* Create state space for refarray */
          refarray[ast[1]] = {};
		  
          /* Assign function code */
		  funcarray[ast[1]]["Code"] = ast[3];           

       } else {
          v = function_already_assigned /* yyerror #1 */;
       }
       return;
    }
	
	/* Function evaluation */
	/* Argument (1) state (2) array */
	function funceval(state, node, ast){
	   switch(ast[0]){
	      case 'RETURN':
		     temp = funceval(state, node, ast[1]);
	         if (temp != undefined) {
	            return temp;
	         } else {
		        return eval(state, node, ast[2]);
			 }
			 break;
		  case 'VALASGN':
		     temp = funceval(state, node, ast[1]);
	         if (temp != undefined) {
	            return temp;
	         } else {
			    valasgn(state, node, ast[2]);
			 }
			 break;
		  case 'IF':
		     temp = funceval(state, node, ast[1]);
	         if (temp != undefined) {
	            return temp;
	         } else {
			    temp = ifstatementnode(state, node, ast[2]);
			    if (temp != undefined) {
	               return temp;
	            }
			 }
			 break;
		  case 'WHILE':
		     temp = funceval(state, node, ast[1]);
	         if (temp != undefined) {
	            return temp;
	         } else {
			    temp = whilestatementnode(state, "WHILE", ast[2]);
			    if (temp != undefined) {
	               return temp;
	            }
			 }
			 break;
		  case 'FOR':
		     valasgn(state, node, ast[2][1]);
			 temp = funceval(state, node, ast[1]);
	         if (temp != undefined) {
	            return temp;
	         } else {
			    temp = forstatementnode(state, "FOR", ast[2]);
			    if (temp != undefined) {
	               return temp;
	            }
			 }
			 break;
		  case 'SWITCH':
		     temp = funceval(state, node, ast[1]);
	         if (temp != undefined) {
	            return temp;
	         } else {
			    temp = switchstatementnode(state, "SWITCH", ast[2]);
			    if (temp != undefined) {
	               return temp;
	            }
			 }
			 break;
		  case 'BREAK':
		     temp = funceval(state, node, ast[1]);
	         if (temp != undefined) {
	            return temp;
	         } else {
		        switch(node){
				   case "WHILE":
				      return "EXIT";
				      break;
				   case "FOR":
				      return "EXIT";
				      break;
				   case "SWITCH":
				      return "EXIT";
					  break;
			    }
			 }
			 break;
	      default:
	   }
	   return;
	}

	/* Value assignment function */
	function valasgn(state, node, ast) {
	   switch(ast[0]){
	      case 'ASGNMENT':
		     refarray[state][ast[1]] = eval(state, node, ast[2]);
		     break;
		  case '++':
		     refarray[state][ast[1]] += 1;
		     break;
		  case '--':
		     refarray[state][ast[1]] -= 1;
		     break;
		  case '+=':
		     refarray[state][ast[1]] += eval(state, node, ast[2]);
		     break;
		  case '-=':
		     refarray[state][ast[1]] -= eval(state, node, ast[2]);
		     break;
		  case '*=':
		     refarray[state][ast[1]] *= eval(state, node, ast[2]);
		     break;
		  case '/=':
		     refarray[state][ast[1]] /= eval(state, node, ast[2]);
		     break;
		  case '%=':
		     refarray[state][ast[1]] %= eval(state, node, ast[2]);
		     break;
	   }
	}

	/* If statement node function */
	function ifstatementnode(state, node, ast){
	   switch(ast[0]){
	      case 'IFNODE':
		     if(eval(state, node, ast[1])==true){
			    return funceval(state, node, ast[2]);
			 }
		  break;
		  case 'ELSEIFNODE':
		     temp = ifstatementnode(state, node, ast[1]);
		     if (temp != undefined) {
			    return temp;
			 } else {
		        return ifstatementnode(state, node, ast[2]);
			 }
		  break;
		  case 'ELSENODE':
		     temp = ifstatementnode(state, node, ast[1]);
		     if (temp != undefined) {
			    return temp;
			 } else {
			    return funceval(state, node, ast[2]);
			 }
		  break;
	   }
	}

	/* While statement node function */
	function whilestatementnode(state, node, ast){
	   switch(ast[0]){
	      case 'WHILENODE':
		     temp = funceval(state, node, ast[2]);
			 if(temp == "EXIT"){
			    return;
			 } else if(temp != undefined){
				return temp;
			 } else if(eval(state, node, ast[1])==true){
				whilestatementnode(state, node, ast);
			 }
			 break;
	   }
	}

	/* For statement node function */
	function forstatementnode(state, node, ast){
	   switch(ast[0]){
	      case 'FORNODE':
			 if(eval(state, node, ast[2])==true){
			    temp = funceval(state, node, ast[4]);
			    if(temp == "EXIT"){
				   return;
				} else if(temp != undefined){
				   return temp;
			    } else {
				   valasgn(state, node, ast[3]);
				   forstatementnode(state, node, ast);
			    }
			 }
			 break;
	   }
	}
	
	/* Switch statement node function */
	function switchstatementnode(state, node, ast){
	   temptarget = eval(state, node, ast[1]);
	   tempfound = false;
	   for (var i in ast[2]) {
	      switch(ast[2][i][0]){
		     case 'CASENODE':
	            if(temptarget == eval(state, node, ast[2][i][1])){
		        tempfound = true;
		        }
		        if(tempfound){
		           temp = funceval(state, node, ast[2][i][2]);
		           if(temp == "EXIT"){
		              return;
		           } else if(temp != undefined){
			          return temp;
		           }
		        }
			    break;
			 case 'DEFAULT':
		        temp = funceval(state, node, ast[2][i][2]);
		        if(temp == "EXIT"){
		           return;
		        } else if(temp != undefined){
			       return temp;
		        }
			    break;
		  }
	   }
	}
	
	/* Maths evaluation */
	/* Argument (1) state (2) array */
    function eval(state, node, ast){
       var v = 0;
       switch(ast[0]) {
          case 'NUMBER':
             v = ast[1];
             break;
		  case '%':
		     v = eval(state, node, ast[1]) % eval(state, node, ast[2]);
			 break;
          case '+':
             v = eval(state, node, ast[1]) + eval(state, node, ast[2]);
             break;
          case '-':
             v = eval(state, node, ast[1]) - eval(state, node, ast[2]);
             break;
          case '*':
             v = eval(state, node, ast[1]) * eval(state, node, ast[2]);
             break;
          case '/':
             v = eval(state, node, ast[1]) / eval(state, node, ast[2]);
             break;
	      case '>=':
		     v = eval(state, node, ast[1]) >= eval(state, node, ast[2]);
			 break;
		  case '<=':
		     v = eval(state, node, ast[1]) <= eval(state, node, ast[2]);
			 break;
		  case '>':
		     v = eval(state, node, ast[1]) > eval(state, node, ast[2]);
			 break;
		  case '<':
		     v = eval(state, node, ast[1]) < eval(state, node, ast[2]);
			 break;
		  case '===':
		     v = eval(state, node, ast[1]) === eval(state, node, ast[2]);
			 break;
		  case '!==':
		     v = eval(state, node, ast[1]) !== eval(state, node, ast[2]);
			 break;
		  case '==':
		     v = eval(state, node, ast[1]) == eval(state, node, ast[2]);
			 break;
		  case '!=':
		     v = eval(state, node, ast[1]) != eval(state, node, ast[2]);
			 break;
		  case '&&':
		     v = eval(state, node, ast[1]) && eval(state, node, ast[2]);
			 break;
		  case '||':
		     v = eval(state, node, ast[1]) || eval(state, node, ast[2]);
			 break;
		  case 'CON':
		     v = eval(state, node, ast[1]) ? eval(state, node, ast[2]) : eval(state, node, ast[3]);
			 break;
		  case 'BOOLEAN':
		     v = ast[1];
			 break;
		  case 'NEG':
		     v = -eval(state, node, ast[1]);
			 break;
		  case 'MATH.ABS':
		     v = Math.abs(eval(state, node, ast[1]));
			 break;
		  case 'MATH.EXP':
		     v = Math.exp(eval(state, node, ast[1]));
			 break;
		  case 'MATH.CEIL':
		     v = Math.ceil(eval(state, node, ast[1]));
			 break;
		  case 'MATH.FLOOR':
		     v = Math.floor(eval(state, node, ast[1]));
			 break;
		  case 'MATH.LOG':
		     v = Math.log(eval(state, node, ast[1]));
			 break;
		  case 'MATH.POW':
		     v = Math.pow(eval(state, node, ast[1]),eval(state, node, ast[2]));
			 break;
		  case 'MATH.ROUND':
		     v = Math.round(eval(state, node, ast[1]));
			 break;
		  case 'MATH.SQRT':
		     v = Math.sqrt(eval(state, node, ast[1]));
			 break;
		  case 'MATH.RANDOM':
		     v = Math.random();
			 break;
		  case 'MATH.MAX':
		     temp = [];
		     for (var i in ast[1]){
			    temp = temp.concat(eval(state, node, ast[1][i]));
			 }
		     v = Math.max.apply(Math, temp);
			 break;
		  case 'MATH.MIN':
		     temp = [];
		     for (var i in ast[1]){
			    temp = temp.concat(eval(state, node, ast[1][i]));
			 }
		     v = Math.min.apply(Math, temp);
			 break;
		  case 'PRICE.OPEN':
		     v = price_slicing(eval(state, node, ast[2]),eval(state, node, ast[1]),"Open");
			 break;
		  case 'PRICE.HIGH':
		     v = price_slicing(eval(state, node, ast[2]),eval(state, node, ast[1]),"High");
			 break;
		  case 'PRICE.LOW':
		     v = price_slicing(eval(state, node, ast[2]),eval(state, node, ast[1]),"Low");
			 break;
		  case 'PRICE.CLOSE':
		     v = price_slicing(eval(state, node, ast[2]),eval(state, node, ast[1]),"Close");
			 break;
		  case 'PRICE.ADJ_CLOSE':
		     v = price_slicing(eval(state, node, ast[2]),eval(state, node, ast[1]),"Adj_Close");
			 break;
          case 'REF':
		     if (ast[1] == "tt") {
			    v = curr_t;
			 } else if (ast[1] == "max_tt") {
			    v = max_t;
			 } else {
		        switch(state) {
			       /* main function */
			       case "main":
                      if (refarray[state][ast[1]] == undefined) {
                         v = value_not_assigned /* yyerror 2 */;
                      } else {
                         v = refarray[state][ast[1]];
                      }
				      break;
				   /* UDF */
				   default:
				      if (funcarray[state]["Arg"][ast[1]] != undefined) {
                         v = funcarray[state]["Arg"][ast[1]];
                      } else if(refarray[state][ast[1]] != undefined){
                         v = refarray[state][ast[1]];
                      } else {
				         v = value_not_assigned /* yyerror 3 */;
				      }
				}
			 }
             break;
          case 'CALL':
             if (funcarray[ast[1]] == undefined) {
                v = function_undefined /* yyerror 4 */;
             } else {
                /* Check if input argument is of same length for defined function */
				if (ast[2].length == Object.keys(funcarray[ast[1]]["Arg"]).length) {
				   /* Temporary assign values */
				   var i = 0;
				   for (var argname in funcarray[ast[1]]["Arg"]) {
					  funcarray[ast[1]]["Arg"][argname] = ast[2][i];
					  i = i + 1;
                   }
				   temp = funceval(ast[1], node, funcarray[ast[1]]["Code"]);
				   if(temp != undefined){
				      v = temp;
				   } else {
				      v = 0;
				   }
				} else {
				   v = Argument_length_does_not_match_function_definition /* yyerror 5 */;
				}
             }
             break;
		  default:
		     v = Unspecified_Operator /* yyerror 6 */;
       }  
       return v;
    }
	
	function price_slicing(id, tt, type){
	   if (id > data.length) {
	      return Stock_ID_Not_Exists /* yyerror 7 */;
	   } else {
	      if(tt<0) {
		     return;
	      } else {
	         return Number(data[id-1][tt][type]);
	      }
	   }
	}
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 63
break;
case 2:return 64
break;
case 3:return 80
break;
case 4:return 81
break;
case 5:return 82
break;
case 6:return 83
break;
case 7:return 84
break;
case 8:return 7
break;
case 9:return 15
break;
case 10:return 24
break;
case 11:return 25
break;
case 12:return 26
break;
case 13:return 27
break;
case 14:return 29
break;
case 15:return 31
break;
case 16:return 33
break;
case 17:return 23
break;
case 18:return 34
break;
case 19:return 55
break;
case 20:return 85
break;
case 21:return 86
break;
case 22:return 68
break;
case 23:return 69
break;
case 24:return 70
break;
case 25:return 71
break;
case 26:return 72
break;
case 27:return 73
break;
case 28:return 74
break;
case 29:return 75
break;
case 30:return 76
break;
case 31:return 77
break;
case 32:return 79
break;
case 33:return 87
break;
case 34:return 62
break;
case 35:return 35
break;
case 36:return 36
break;
case 37:return 41
break;
case 38:return 37
break;
case 39:return 38
break;
case 40:return 39
break;
case 41:return 40
break;
case 42:return 61
break;
case 43:return 59
break;
case 44:return 60
break;
case 45:return 58
break;
case 46:return 57
break;
case 47:return 9
break;
case 48:return 11
break;
case 49:return 12
break;
case 50:return 14
break;
case 51:return 43
break;
case 52:return 32
break;
case 53:return 12
break;
case 54:return 14
break;
case 55:return 17
break;
case 56:return 44
break;
case 57:return 45
break;
case 58:return 46
break;
case 59:return 47
break;
case 60:return 48
break;
case 61:return 49
break;
case 62:return 50
break;
case 63:return 51
break;
case 64:return 43
break;
case 65:return 52
break;
case 66:return 53
break;
case 67:return 54
break;
case 68:return 42
break;
case 69:return '.'
break;
case 70:return 5
break;
case 71:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:tt\b)/,/^(?:max_tt\b)/,/^(?:Price.open\b)/,/^(?:Price.high\b)/,/^(?:Price.low\b)/,/^(?:Price.close\b)/,/^(?:Price.adj_close\b)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:var\b)/,/^(?:Boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Math.abs\b)/,/^(?:Math.exp\b)/,/^(?:Math.ceil\b)/,/^(?:Math.floor\b)/,/^(?:Math.log\b)/,/^(?:Math.pow\b)/,/^(?:Math.round\b)/,/^(?:Math.sqrt\b)/,/^(?:Math.random\b)/,/^(?:Math.max\b)/,/^(?:Math.min\b)/,/^(?:[a-zA-Z]+([_a-zA-Z0-9]+)?\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:%=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?::)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:===)/,/^(?:!==)/,/^(?:==)/,/^(?:!=)/,/^(?:,)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\?)/,/^(?:=)/,/^(?:\.)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = use_functions_bool;
exports.Parser = use_functions_bool.Parser;
exports.parse = function () { return use_functions_bool.parse.apply(use_functions_bool, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}